Modelo:
package com.sena.crud_basic.model;
@Entity(name = "category")
public class Category {
        // Para indicar que el atributo sera la clave primaria
        @Id
        // Para indicar que sera autoincrement
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        // Para indicar que sera una columna en la bd
        @Column(name = "cat_id")
        private int id;

        @Column(name = "cat_name", length = 30, nullable = false)
        private String name;

        @Column(name = "cat_description", columnDefinition = "TEXT")
        private String description;

        // PNI
        @OneToMany(mappedBy = "category", cascade = CascadeType.ALL, orphanRemoval = true)
        private List<Event> events = new ArrayList<>(); 

        // Constructores
        public Category() {}

        public Category(int id, String name, String description) {
                this.id = id;
                this.name = name;
                this.description = description;
        }

        // Getters and Setters
        // id
        public int getId() {
                return id;
        }

        public void setId(int id) {
                this.id = id;
        }

        // name
        public String getName() {
                return name;
        }

        public void setName(String name) {
                this.name = name;
        }

        // description
        public String getDescription() {
                return description;
        }

        public void setDescription(String description) {
                this.description = description;
        }

        // events
        public List<Event> getEvents() {
                return events;
        }

        public void setEvents(List<Event> events) {
                this.events = events;
        }
}

DTO Modelo:
package com.sena.crud_basic.DTO;
public class CategoryDTO {

    private int id;
    private String name;
    private String description;

    public CategoryDTO() {}

    public CategoryDTO(int id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}

ResponseDTO:
package com.sena.crud_basic.DTO;
@JsonInclude(JsonInclude.Include.NON_NULL) // Oculta los campos con valor null en el JSON
public class responseDTO {
    private HttpStatus status;
    private String message;
    private Object data;
    
    public responseDTO(HttpStatus status, String message) {
        this.status = status;
        this.message = message;
    }
    public responseDTO(HttpStatus status, String message, Object data) {
        this.status = status;
        this.message = message;
        this.data = data;
    }

    public HttpStatus getStatus() {
        return status;
    }

    public void setStatus(HttpStatus status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Object getData() {
        return data;
    }

    public void setData(Object data) {
        this.data = data;
    }
}

Metodos de Mapeo:
package com.sena.crud_basic.mapper;
import com.sena.crud_basic.DTO.CategoryDTO;
import com.sena.crud_basic.model.Category;
public class CategoryMapper {

    public static CategoryDTO toDTO(Category category) {
        return new CategoryDTO(category.getId(), category.getName(), category.getDescription());
    }

    public static Category toEntity(CategoryDTO dto) {
        return new Category(dto.getId(),dto.getName(), dto.getDescription());
    }

    public static List<CategoryDTO> toDTOList(List<Category> categories) {
        return categories.stream().map(CategoryMapper::toDTO).collect(Collectors.toList());
    }
}

Interfaz Repository:
package com.sena.crud_basic.interfaces;
import com.sena.crud_basic.model.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
@Repository
public interface ICategory extends JpaRepository<Category, Integer>{
    boolean existsByNameIgnoreCase(String name);
}

Service:
package com.sena.crud_basic.service;
import java.util.List;
import java.util.NoSuchElementException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
@Service
public class CategoryServices {

    @Autowired
    private ICategory categoryData;

    public List<CategoryDTO> findAllCategory() {
        List<Category> categories = categoryData.findAll();
        return CategoryMapper.toDTOList(categories);
    }

    public CategoryDTO findByIdCategory(int id) {
        return categoryData.findById(id)
                .map(CategoryMapper::toDTO)
                .orElseThrow(() -> new NoSuchElementException("Categoria con ID " + id + " no encontrada"));
    }

    public responseDTO save(CategoryDTO categoryDTO) {
        // Convertir el nombre a minusculas y quitar los espacios 
        String convertName = categoryDTO.getName().replaceAll("\\s", "");

        // Verificar si ya existe la categoria
        // Version New
        if (categoryData.existsByNameIgnoreCase(convertName)) {
            throw new IllegalArgumentException("Ya existe una categoria con el nombre " + categoryDTO.getName());
        }

        Category category = CategoryMapper.toEntity(categoryDTO);
        Category savedCategory = categoryData.save(category);
        CategoryDTO savedCategoryDTO = CategoryMapper.toDTO(savedCategory);
        return new responseDTO(
            HttpStatus.CREATED, 
            "Categoria creada con exito",
            savedCategoryDTO
        );
    }

    public responseDTO update(CategoryDTO categoryDTO) {
        Category category = categoryData.findById(categoryDTO.getId())
            .orElseThrow(() -> new NoSuchElementException("Categoria con ID " + categoryDTO.getId() + " no encontrada"));

        category.setName(categoryDTO.getName());
        category.setDescription(categoryDTO.getDescription());

        Category updatedCategory = categoryData.save(category);
        CategoryDTO updatedCategoryDTO = CategoryMapper.toDTO(updatedCategory);

        return new responseDTO(HttpStatus.OK, "Categoria actualizada con exito", updatedCategoryDTO);
    }

    public responseDTO delete(int id) {
        Category category = categoryData.findById(id)
            .orElseThrow(() -> new NoSuchElementException("Categoria con ID " + id + " no encontrada"));

        categoryData.delete(category);
        return new responseDTO(HttpStatus.OK, "Categoria con id " + id + " eliminada con Ã©xito");
    }
}

Controller:
package com.sena.crud_basic.controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.sena.crud_basic.service.CategoryServices;
import com.sena.crud_basic.DTO.CategoryDTO;
import com.sena.crud_basic.DTO.responseDTO;
@RestController
@RequestMapping("api/v1/category")
public class CategoryController {

    @Autowired 
    private CategoryServices categoryServices;   


    @GetMapping("/GetAll")
    public ResponseEntity<List<CategoryDTO>> findAllCategory() {
        List<CategoryDTO> listCategory = categoryServices.findAllCategory();
        return ResponseEntity.ok(listCategory);    
    } 
    
    @GetMapping("/GetById/{id}")
    public ResponseEntity<CategoryDTO> findCategoryById(@PathVariable int id) {
        CategoryDTO category = categoryServices.findByIdCategory(id);
        return ResponseEntity.ok(category);
    }
    
    @PostMapping("/Create")
    public ResponseEntity<responseDTO> save(@RequestBody CategoryDTO categoryDTO) {
        responseDTO response = categoryServices.save(categoryDTO);
        return ResponseEntity.status(response.getStatus()).body(response);
    }
    
    @PutMapping("/Update")
    public ResponseEntity<responseDTO> update(@RequestBody CategoryDTO categoryDTO) {
        responseDTO response = categoryServices.update(categoryDTO);
        return ResponseEntity.status(response.getStatus()).body(response);
    }

    @DeleteMapping("/Delete/{id}")
    public ResponseEntity<responseDTO> delete(@PathVariable int id) {
        responseDTO response = categoryServices.delete(id);
        return ResponseEntity.status(response.getStatus()).body(response);
    }
}

Exception:
package com.sena.crud_basic.exception;
import java.util.NoSuchElementException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import com.sena.crud_basic.DTO.responseDTO;
@ControllerAdvice
public class GlobalExceptionHandler {
    // Manejo de elementos no encontrados
    @ExceptionHandler(NoSuchElementException.class)
    public ResponseEntity<responseDTO> handleNoSuchElementException(NoSuchElementException ex) {
        responseDTO response = new responseDTO(
            HttpStatus.NOT_FOUND,
            "Recurso no encontrado: " + ex.getMessage()
        );
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    // Manejo de Argumentos Invalidos
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<responseDTO> handleIllegalArgumentException(IllegalArgumentException ex) {
        responseDTO response = new responseDTO(
            HttpStatus.BAD_REQUEST,
            "Error: " + ex.getMessage()
        );
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    // Manejo de excepciones generales
    @ExceptionHandler(Exception.class)
    public ResponseEntity<responseDTO> handleGeneralException(Exception ex) {
        responseDTO response = new responseDTO(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Error interno del servidor: " + ex.getMessage()
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}